from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from mistral import ask_mistral

from keyboards.reply_keyboards import reply_keyboard
from keyboards.inline_keyboards import (inline_keyboard, create_gender_button,
                                        create_bucket_button, cline_bucket_keyboard, corrected_address_keyboard)

from fsm import UserFSM

from database import CRUD

from address import check_address

user_router = Router()

BUCKET_ALL_ITEMS = ["t-shirt_man_bucket", "pants_man_bucket", "hats_man_bucket", "shoes_man_bucket",
                    "t-shirt_woman_bucket", "pants_woman_bucket", "hats_woman_bucket", "shoes_woman_bucket"]
MAN_ITEMS = ["t-shirt_man", "pants_man", "hats_man", "shoes_man"]
WOMAN_ITEMS = ["t-shirt_woman", "pants_woman", "hats_woman", "shoes_woman"]

DICT_OF_BUCKET_ALL_ITEMS = {
    "t-shirt_man_bucket": "–§—É—Ç–±–æ–ª–∫–∞ Adidas –º—É–∂—Å–∫–∞—è\n\n700 —Ä—É–±",
    "t-shirt_woman_bucket": "–§—É—Ç–±–æ–ª–∫–∞ Adidas –∂–µ–Ω—Å–∫–∞—è\n\n700 —Ä—É–±",

    "pants_man_bucket": "–®—Ç–∞–Ω—ã Nike –º—É–∂—Å–∫–∏–µ\n\n1000 —Ä—É–±",
    "pants_woman_bucket": "–®—Ç–∞–Ω—ã Nike –∂–µ–Ω—Å–∫–∏–µ\n\n1000 —Ä—É–±",

    "hats_man_bucket": "–ö–µ–ø–∫–∞ Puma –º—É–∂—Å–∫–∞—è\n\n500 —Ä—É–±",
    "hats_woman_bucket": "–ö–µ–ø–∫–∞ Puma –∂–µ–Ω—Å–∫–∞—è\n\n500 —Ä—É–±",

    "shoes_man_bucket": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ New Balance –º—É–∂—Å–∫–∏–µ\n\n2000 —Ä—É–±",
    "shoes_woman_bucket": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ New Balance –∂–µ–Ω—Å–∫–∏–µ\n\n2000 —Ä—É–±",

    "t-shirt_man": "–§—É—Ç–±–æ–ª–∫–∞ Adidas –º—É–∂—Å–∫–∞—è\n\n700 —Ä—É–±",
    "t-shirt_woman": "–§—É—Ç–±–æ–ª–∫–∞ Adidas –∂–µ–Ω—Å–∫–∞—è\n\n700 —Ä—É–±",

    "pants_man": "–®—Ç–∞–Ω—ã Nike –º—É–∂—Å–∫–∏–µ\n\n1000 —Ä—É–±",
    "pants_woman": "–®—Ç–∞–Ω—ã Nike –∂–µ–Ω—Å–∫–∏–µ\n\n1000 —Ä—É–±",

    "hats_man": "–ö–µ–ø–∫–∞ Puma –º—É–∂—Å–∫–∞—è\n\n500 —Ä—É–±",
    "hats_woman": "–ö–µ–ø–∫–∞ Puma –∂–µ–Ω—Å–∫–∞—è\n\n500 —Ä—É–±",

    "shoes_man": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏ New Balance –º—É–∂—Å–∫–∏–µ\n\n2000 —Ä—É–±",
    "shoes_woman":"–ö—Ä–æ—Å—Å–æ–≤–∫–∏ New Balance –∂–µ–Ω—Å–∫–∏–µ\n\n2000 —Ä—É–±",
}


URL_PHOTO = {
    "t-shirt_man": "https://cdn1.ozone.ru/s3/multimedia-m/6008738446.jpg",
    "pants_man": "https://avatars.mds.yandex.net/get-mpic/5346941/img_id8180805022433495503.jpeg/orig",
    "hats_man": "https://avatars.mds.yandex.net/i?id=5b5d31ff877124e52af997686198a1ed5cfced45-10310233-images-thumbs&n=13",
    "shoes_man": "https://avatars.mds.yandex.net/i?id=e6824fb97a219298eec4cadf322ef6a0_l-5103223-images-thumbs&n=13",
    "t-shirt_woman": "https://cdn1.ozone.ru/s3/multimedia-1-n/7077047987.jpg",
    "pants_woman": "https://img.joomcdn.net/dcaac2b8cb51823b7bc729aca0c9ef94d00264e6_original.jpeg",
    "hats_woman": "https://avatars.mds.yandex.net/i?id=ef9fadeec4769e31340f6c7a201b1118_l-5235458-images-thumbs&n=13",
    "shoes_woman": "https://images-eu.ssl-images-amazon.com/images/I/41QaU9u2sqL._UL1000_.jpg"
}


@user_router.message(Command("start"))
async def say_hello(message: Message, state: FSMContext):
    await state.clear()

    user_id = str(message.from_user.id)

    if not(await CRUD.check_user(user_id=user_id)):
        await CRUD.insert_user(user_id=user_id, username=message.from_user.username)
    text = (f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!\n\n"
                  f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã Fashion Hub.\n"
                  f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
                  f"‚úÖ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥\n"
                  f"‚úÖ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É\n"
                  f"‚úÖ–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏\n")

    await message.answer(text,
                         reply_markup=reply_keyboard)

#-------------------------------------catalog-------------------------------------------------
@user_router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message, state: FSMContext):
    await state.clear()

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"

    await message.answer(text,
                         reply_markup=inline_keyboard)


@user_router.callback_query(F.data == "t-shirt")
async def catalog_t_shirt(callback: CallbackQuery):
    keyboard = await create_gender_button("t-shirt")

    await callback.message.answer("–ú—É–∂—Å–∫–∞—è –∏–ª–∏ –∂–µ–Ω—Å–∫–∞—è",
                                  reply_markup=keyboard)


@user_router.callback_query(F.data == "pants")
async def catalog_pants(callback: CallbackQuery):
    keyboard = await create_gender_button("pants")

    await callback.message.answer("–ú—É–∂—Å–∫–∞—è –∏–ª–∏ –∂–µ–Ω—Å–∫–∞—è",
                                  reply_markup=keyboard)


@user_router.callback_query(F.data == "hats")
async def catalog_hats(callback: CallbackQuery):
    keyboard = await create_gender_button("hats")

    await callback.message.answer("–ú—É–∂—Å–∫–∞—è –∏–ª–∏ –∂–µ–Ω—Å–∫–∞—è",
                                  reply_markup=keyboard)


@user_router.callback_query(F.data == "shoes")
async def catalog_shoes(callback: CallbackQuery):
    keyboard = await create_gender_button("shoes")

    await callback.message.answer("–ú—É–∂—Å–∫–∞—è –∏–ª–∏ –∂–µ–Ω—Å–∫–∞—è",
                                  reply_markup=keyboard)


@user_router.callback_query(lambda callback: callback.data in MAN_ITEMS)
async def category_man(callback: CallbackQuery):
    keyboard = await create_bucket_button(callback.data)

    await callback.message.answer_photo(photo=URL_PHOTO[callback.data],
                                        caption=DICT_OF_BUCKET_ALL_ITEMS[callback.data],
                                        reply_markup=keyboard)


@user_router.callback_query(lambda callback: callback.data in WOMAN_ITEMS)
async def category_woman(callback: CallbackQuery):
    keyboard = await create_bucket_button(callback.data)

    await callback.message.answer_photo(photo=URL_PHOTO[callback.data],
                                        caption=DICT_OF_BUCKET_ALL_ITEMS[callback.data],
                                        reply_markup=keyboard)


@user_router.callback_query(lambda callback: callback.data in BUCKET_ALL_ITEMS)
async def bucket_all(callback: CallbackQuery):
    await CRUD.insert_bucket(str(callback.from_user.id), callback.data)
    await callback.answer("–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)

#-------------------------------------catalog-------------------------------------------------


#-------------------------------------bucket--------------------------------------------------
@user_router.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def bucket(message: Message):
    try:
        items = await CRUD.read_user_items(str(message.from_user.id))
        list_of_items = items.split("|")

        text = f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å:\n\n"

        for index in range(1, len(list_of_items)):
            text = text + f"üì¶ {DICT_OF_BUCKET_ALL_ITEMS[list_of_items[index]]}\n\n"

        await message.answer(text,
                             reply_markup=cline_bucket_keyboard)
    except:
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


@user_router.callback_query(F.data == "clean_bucket")
async def clean_bucket(callback: CallbackQuery):
    await CRUD.delete_items(str(callback.from_user.id))

    await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)
#-------------------------------------bucket--------------------------------------------------


#-------------------------------------query---------------------------------------------------
@user_router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: Message, state: FSMContext):
    await state.set_state(UserFSM.ai_state)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞")

@user_router.message(UserFSM.ai_state)
async def ask_question_state(message: Message):
    try:
        text = message.text

        prompt = (f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º –≤ –º–∞–≥–∞–∑–∏–Ω–µ –æ–¥–µ–∂–¥—ã,"
                  f"—Å—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ,"
                  f"—á—Ç–æ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, –ø–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É, —Ç–∞–º –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."
                  f"–ù–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π!"
                  f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–º–µ–µ—Ç—Å—è:"
                  f"2 —Ñ—É—Ç–±–æ–ª–∫–∏ (adidas),"
                  f"2 –∫–µ–ø–∫–∏ (puma),"
                  f"2 –ø–∞—Ä—ã —à—Ç–∞–Ω–æ–≤ (nike),"
                  f"2 –ø–∞—Ä—ã –±–æ—Ç–∏–Ω–æ–∫ (new balance)."
                  f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:{text}")
        result = await ask_mistral(prompt)

        await message.answer(result)
    except:
        await message.answer("–ü–æ–∂–∞–ª–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
#-------------------------------------query---------------------------------------------------


#-------------------------------------order---------------------------------------------------
@user_router.message(F.text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def order(message: Message, state: FSMContext):
    await state.set_state(UserFSM.order_state)

    try:
        items = await CRUD.read_user_items(str(message.from_user.id))
        items.split("|")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏")
    except:
        await message.answer("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")


@user_router.message(UserFSM.order_state)
async def order_state(message: Message, state: FSMContext):
    user_address = message.text
    result = check_address(user_address)

    if result[1]:
        await message.answer(f"–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
                             f"üåÜ –≥–æ—Ä–æ–¥: {result[0]['city']}\n"
                             f"üõ£Ô∏è —É–ª–∏—Ü–∞: {result[0]['street']}\n"
                             f"üè† –¥–æ–º: {result[0]['house']}\n\n"
                             f"–ê–¥—Ä–µ—Å –≤–µ—Ä–Ω—ã–π ?",
                             reply_markup=corrected_address_keyboard)
        await state.clear()
    else:
        await message.answer(result[0])

@user_router.callback_query(F.data == "address_corrected")
async def correct_address(callback: CallbackQuery):
    user_id = str(callback.from_user.id)

    await CRUD.delete_items(user_id=user_id)
    await CRUD.add_order(user_id=user_id)
    await callback.message.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

@user_router.callback_query(F.data == "address_uncorrected")
async def uncorrected_address(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserFSM.finally_order_state)
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å: –ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º")

@user_router.message(UserFSM.finally_order_state)
async def order_state(message: Message, state: FSMContext):
    user_address = message.text
    result = check_address(user_address)

    if result[1]:
        await message.answer(f"–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ –∞–¥—Ä–µ—Å:\n\n"
                             f"üåÜ –≥–æ—Ä–æ–¥: {result[0]['city']}\n"
                             f"üõ£Ô∏è —É–ª–∏—Ü–∞: {result[0]['street']}\n"
                             f"üè† –¥–æ–º: {result[0]['house']}\n\n"
                             f"–ê–¥—Ä–µ—Å –≤–µ—Ä–Ω—ã–π ?",
                             reply_markup=corrected_address_keyboard)
        await state.clear()
    else:
        await message.answer(result[0])

#-------------------------------------order---------------------------------------------------


#-------------------------------------feedback------------------------------------------------
@user_router.message(F.text == "–û—Ç–∑—ã–≤")
async def feedback(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(UserFSM.feedback_state)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞")

@user_router.message(UserFSM.feedback_state)
async def feedback_state(message: Message, state: FSMContext):
    try:
        text = message.text

        await CRUD.insert_feedback(user_id=str(message.from_user.id), text_feedback=text)
        await state.clear()

        await message.answer("–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
#-------------------------------------feedback------------------------------------------------
